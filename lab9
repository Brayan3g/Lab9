/* UNIVERSIDAD DEL VALLE DE GUATEMALA
 * DEPARTAMENTO DE INGENIERIA ELCTRONICA & MECATRONICA
 * CURSO DE PROGRAMACION DE MICROCONTROLADORES
 * LABORATORIO No.9
 * 
 * File:   Main8.c
 * Author: BRAYAN GABRIEL GIRON GARCIA
 *
 * Created on 27 de abril de 2021, 06:21 PM
 */
//-----------------------------------------------------------------------------------------------------------------------------------
// CONFIG1
//-----------------------------------------------------------------------------------------------------------------------------------
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

//-----------------------------------------------------------------------------------------------------------------------------------
// CONFIG2
//-----------------------------------------------------------------------------------------------------------------------------------
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//-----------------------------------------------------------------------------------------------------------------------------------
// LIBRERIAS
//-----------------------------------------------------------------------------------------------------------------------------------
#include <xc.h>
#include <stdint.h>             // TIPOS DE DATOS ESTANDAR Y OTROS.

//-----------------------------------------------------------------------------------------------------------------------------------
// DIRECTIVAS DEL COPILADOR
//-----------------------------------------------------------------------------------------------------------------------------------
#define _XTAL_FREQ 8000000      /* ESPECIFICAMOS LA FRECUENCIA DE RELOJ,
                                   PARA PODER USAR LOS DELAY EN EL PROGRAMA.*/
//______________________________________________________________________________
// DECLARACION DE VARIABLES
//______________________________________________________________________________

//______________________________________________________________________________
// PROTOTIPOS DE FUNCIONES
//______________________________________________________________________________

void SETUP(void);

//______________________________________________________________________________
// FUNCION DE INTERRUPCIONES
//______________________________________________________________________________

void __interrupt() isr(void){
    
//----------------------------- INTERRUPCION ADC -------------------------------     
  if(ADIF == 1){               // Revisamos si la bandera del ADC esta levantada.   
      if(ADCON0bits.CHS == 0){ // Revisamos si esta en el canal 0. 
         CCPR1L = (ADRESH>>1)+124; // Asignamos el valor del ADRESH al CCPR1L.
         CCP1CONbits.DC1B1 = ADRESH & 0b01;
         CCP1CONbits.DC1B0 = (ADRESL>>7);
        }
      else{                   
         CCPR2L = (ADRESH>>1)+124; // Asignamos el valor del ADRESH al CCPR2L.
         CCP2CONbits.DC2B1 = ADRESH & 0b01;
         CCP2CONbits.DC2B0 = (ADRESL>>7);
        }
      ADIF = 0;  // Limpiamos la bandera del ADC.
  }  
}
//______________________________________________________________________________
// FUNCION PRINCIPAL (MAIN & LOOP)
//______________________________________________________________________________

void main(void){
     SETUP();                         // Llamamos a la funcion de configuracion.
     while(1){
         
         if(ADCON0bits.GO == 0){      // Revisamos si ya termino la converion.
             if(ADCON0bits.CHS == 0){ // Revisamos si esta en el canal 0.
                 ADCON0bits.CHS = 1;} // Cambiamos al canal 1. 
             else{ 
                 ADCON0bits.CHS = 0;} // Cambiamos al canal 0. 
             __delay_us(50);
             ADCON0bits .GO = 1;      // Encendemos la conversion nuevamente.     
         }
     }
}

//______________________________________________________________________________
// FUNCION DE CONFIGURACION
//______________________________________________________________________________

void SETUP(void){
    
//------------------- CONFIGURACION DE ENTRADAS Y SALIDAS ----------------------
    ANSEL  = 0b00000011;    // Seleccionamos las entradas AN1 & AN2.   
    ANSELH = 0x00;          // Desactivamos las otras entradas analogicas. 
 
    TRISC = 0x00;           // Declaramos el PORTC como salidas.
    TRISA = 0x03;           // Declaramos el pin 0 y 1 del PORTA como entradas. 
    
    PORTC = 0x00;           // Limpiamos los puertos. 
    PORTA = 0x00; 
    
//---------------------- CONFIGURACION DE RELOJ A 8MHZ -------------------------
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 1;
    OSCCONbits.SCS   = 1;
    
//-------------------------- CONFIGURACION DE ADC ------------------------------
    ADCON1bits.ADFM  = 0;    // Justificado a la izquierda.
    ADCON1bits.VCFG0 = 0;    // Voltaje de refencia inferior en 0v.
    ADCON1bits.VCFG1 = 0;    // Voltaje de referncia superior 5v.
    
    ADCON0bits.ADCS  = 0b10; // ADC Clock (Fosc/8).
    ADCON0bits.CHS   = 0;    // Seleeccionamos el canal 0.
    __delay_us(100);             
    ADCON0bits.ADON  = 1;    // Encendemos el modulo ADC.
    __delay_us(50);
    
//--------------------------- CONFIGURACION DE PWM -----------------------------
    TRISCbits.TRISC2 = 1;    // RC2/CCP1 encendido
    TRISCbits.TRISC1 = 1;    // RC1/CCP1 encendido
    
    PR2 = 255;               // Configurando el periodo
    CCP1CONbits.P1M = 0;     // Configurar el modo PWM
    
    CCP1CONbits.CCP1M = 0b1100;
    CCP2CONbits.CCP2M = 0b1100;
    
    CCPR1L = 0x0f;
    CCPR2L = 0x0f;
    
    CCP1CONbits.DC1B = 0;
    CCP2CONbits.DC2B0 = 0;
    CCP2CONbits.DC2B1 = 0;
    
    PIR1bits.TMR2IF  =  0;
    T2CONbits.T2CKPS =  0b11;
    T2CONbits.TMR2ON =  1;
    
    while(PIR1bits.TMR2IF  ==  0);
    PIR1bits.TMR2IF  =  0;
    
    TRISCbits.TRISC2 = 0; 
    TRISCbits.TRISC1 = 0;     
    
//---------------------- CONFIGURACION DE INTERRUPCIONES -----------------------
    INTCONbits.GIE  = 1;     // Habilitamos las interrupciones globales.
    INTCONbits.PEIE = 1;     // Habilitamos las interrupciones perifericas.
    PIE1bits.ADIE   = 1;     // Habilitamos la interrupcion del ADC.
    PIR1bits.ADIF   = 0;     // Limpiamos la bandera del ADC.
}
    

